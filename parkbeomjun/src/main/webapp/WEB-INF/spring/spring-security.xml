<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

	
	<!-- 확장자를 이용해 패턴을 걸때는 /**/*.해당 확장자 로 할 것(Ant Pattern 규칙) -->
 	<!-- <http pattern="/resources/**/*/*.js" security="none"/>
	<http pattern="/resources/**/*/*.css" security="none"/> -->
	<http pattern="/resources/**/**/*" security="none"/>
	
	 
	<http auto-config="true" use-expressions="true">
		<!-- 스프링 시큐리티 자동로그인 = Remember Me -->
		<!-- 
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/login.do" access="isAnonymous()" />
		<intercept-url pattern="/main.do" access="permitAll" />
		<intercept-url pattern="/**" access="permitAll"/>
		-->
		<form-login
			username-parameter="loginid"
			password-parameter="loginpwd" 
			login-page="/security/main"
			login-processing-url="/security/user/login"
			default-target-url="/security/main" 
			authentication-success-handler-ref="customAuthenticationSuccessHandler"
			authentication-failure-handler-ref="customAuthenticationFailureHandler"
		/>
		
		<!--
			login-page = 로그인 페이지
			login-processing-url = 로그인 처리 페이지
			default-target-url = 로그인 성공후 이동할 페이지
			login-processing-url 설정 없다면 기본값은 -> j_spring_security_check 
		-->
		
<!--
	세션 관리 할때 		
	<listener>
	    <listener-class>
	          org.springframework.security.web.session.HttpSessionEventPublisher
	    </listener-class>
	</listener>

	error-if-maximum-exceeded = true일경우... 이중 로그인을 방지 할때 먼저 로그인한사람과 나중에 로그인한 사람이 있을경우 나중에 로그인한사람은 로그인 되지 않음 
	<session-management invalid-session-url="/login?error=sessionExpired" session-authentication-error-url="/login?error=alreadyLogin">
      		<concurrency-control max-sessions="1"  expired-url="/login?error=sessionExpiredDuplicateLogin" error-if-maximum-exceeded="false"/>
	</session-management>
		
특별한 포트를 이용시
  <port-mappings>
    <port-mapping http="9080" https="9443"/>
  </port-mappings>		
 -->		
		<anonymous granted-authority="ANONYMOUS" />
		<logout 
			logout-success-url="/security/main"
			delete-cookies="JSESSIONID"
		/>
		<!-- 
			logout-success-url 설정 없을시 기본값은 -> j_spring_security_logout
		 -->
		
		<!-- http://kwonnam.pe.kr/wiki/springframework/security/customfilter -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor"/>        
	</http>
	

<!-- 로그인 버튼 눌렀을 경우 -->
	<beans:bean id="customJdbcDaoImpl" class="com.peoplewiki.security.springSecurity.persistence.CustomJdbcDaoImpl">
		<beans:property name="dataSource" ref="logDataSource_pos" />
		<beans:property name="rolePrefix" value="" />
		<beans:property name="usersByUsernameQuery" value="SELECT ID, PASSWORD, NAME FROM MEMBERINFO WHERE ID=?" />
		<beans:property name="authoritiesByUsernameQuery" value="SELECT AUTHORITY FROM MEMBER_AUTHORITY WHERE ID=?" />
		<beans:property name="groupAuthoritiesByUsernameQuery" value="SELECT B.AUTHORITY FROM GROUPS_MEMBER A, GROUPS_AUTHORITY B WHERE A.MEMBER_ID=? AND A.GROUP_ID = B.GROUP_ID" />
		<beans:property name="enableGroups" value="false" />
	</beans:bean>

<!-- 인증 처리 시 디비 사용 및 암호화 -->	
	<authentication-manager>
		<authentication-provider user-service-ref="customJdbcDaoImpl" >			
			<password-encoder ref="bcryptPasswordEncoder" />
		</authentication-provider>
	</authentication-manager>	
<!-- 테스트 코드 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="user1" password="user1password" authorities="ROLE_USER"/>
				<user name="admin1" password="admin1password" authorities="ROLE_ADMIN"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
-->
	
<!-- 사용될 암호화 기능 -->
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	

<!-- 서버 로딩시 + 리퀘스트 발생시 마다 처리될 로직임 시작 -->	
	<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
		<!-- <beans:property name="authenticationManager" ref="org.springframework.security.authentication.AuthenticationManager" /> -->
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="reloadableFilterInvocationSecurityMetadataSource" />
	</beans:bean>

<!-- 사용자 권한과 URL의 부여된 권한을 비교 한다 62번 라인을 디버그 해서 참고 -->	
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter">
					<beans:property name="rolePrefix" value="" />
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
		<beans:property name="allowIfAllAbstainDecisions" value="false" />
	</beans:bean>
	
	<beans:bean id="reloadableFilterInvocationSecurityMetadataSource" class="com.peoplewiki.security.springSecurity.domain.ReloadableFilterInvocationSecurityMetadataSource">
		<beans:constructor-arg ref="requestMap" />
		<beans:property name="securedObjectService" ref="securedObjectService" />
	</beans:bean>
	
	<beans:bean id="requestMap" class="com.peoplewiki.security.springSecurity.domain.UrlResourcesMapFactoryBean" init-method="init">
		<beans:property name="securedObjectService" ref="securedObjectService" />
	</beans:bean>
	
	<beans:bean id="securedObjectService" class="com.peoplewiki.security.springSecurity.service.SecuredObjectServiceImpl">
		<beans:property name="secureObjectDao" ref="securedObjectDao" />
	</beans:bean>	
	
	<beans:bean id="securedObjectDao" class="com.peoplewiki.security.springSecurity.persistence.SecuredObjectDaoImpl">
		<beans:property name="dataSource" ref="logDataSource_pos" />
		<beans:property name="sqlRolesAndUrl" value="
			SELECT A.RESOURCE_PATTERN AS URL, B.AUTHORITY AS AUTHORITY 
			FROM SECURED_RESOURCES A, SECURED_RESOURCES_AUTHORITY B 
			WHERE A.RESOURCE_ID = B.RESOURCE_ID 
			AND A.RESOURCE_TYPE = 'url' 
			ORDER BY A.resource_pattern, A.SORT_ORDER
    	"/>
	</beans:bean>
<!-- 서버 로딩시 + 리퀘스트 발생시 마다 처리될 로직임 종료-->	


<!-- 인증 성공시 -->
	<beans:bean id="customAuthenticationSuccessHandler" class="com.peoplewiki.security.springSecurity.handler.CustomAuthenticationSuccessHandler">
		<beans:property name="targetUrlParameter" value="loginRedirect" />
		<beans:property name="useReferer" value="false" />
		<beans:property name="defaultUrl" value="/security/main" />
	</beans:bean>
	
<!-- 인증 실패시 -->	
	<beans:bean id="customAuthenticationFailureHandler" class="com.peoplewiki.security.springSecurity.handler.CustomAuthenticationFailureHandler">
		<beans:property name="loginidname" value="loginid" />
		<beans:property name="loginpasswdname" value="loginpwd" />
		<beans:property name="loginredirectname" value="loginRedirect" />
		<beans:property name="exceptionmsgname" value="securityexceptionmsg" />
		<beans:property name="defaultFailureUrl" value="/security/main?fail=true" />
	</beans:bean>
	
<!-- 권한 없을시 처리 지금은 web.xml에 설정해놓은 http status code 별로 설정해놓은 페이지로 이동 -->	
<!--
	<beans:bean id="accessDenied" class="com.peoplewiki.security.springSecurity.handler.CustomAccessDeniedHandler">
		<beans:property name="errorPage" value="/error/400.do" />
	</beans:bean> 
-->
	
	
	
</beans:beans>

